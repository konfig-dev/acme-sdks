/*
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.acme.client.api;

import com.acme.client.ApiException;
import java.io.File;
import com.acme.client.model.ModelApiResponse;
import com.acme.client.model.Pet;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PetApi
 */
@Disabled
public class PetApiTest {

    private final PetApi api = new PetApi();

    /**
     * Add a new pet to the store
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTest() throws ApiException {
        Pet pet = null;
        Pet response = api.add(pet);
        // TODO: test validations
    }

    /**
     * Deletes a pet
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        Long petId = null;
        api.delete(petId);
        // TODO: test validations
    }

    /**
     * Finds Pets by status
     *
     * Multiple status values can be provided with comma separated strings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findByStatusTest() throws ApiException {
        List<String> status = null;
        List<Pet> response = api.findByStatus(status);
        // TODO: test validations
    }

    /**
     * Finds Pets by tags
     *
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findByTagsTest() throws ApiException {
        List<String> tags = null;
        List<Pet> response = api.findByTags(tags);
        // TODO: test validations
    }

    /**
     * Find pet by ID
     *
     * Returns a single pet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Long petId = null;
        Pet response = api.getById(petId);
        // TODO: test validations
    }

    /**
     * Update an existing pet
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        Pet pet = null;
        Pet response = api.update(pet);
        // TODO: test validations
    }

    /**
     * Updates a pet in the store with form data
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWithFormTest() throws ApiException {
        Long petId = null;
        String name = null;
        String status = null;
        api.updateWithForm(petId, name, status);
        // TODO: test validations
    }

    /**
     * uploads an image
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadImageTest() throws ApiException {
        Long petId = null;
        String additionalMetadata = null;
        File _file = null;
        ModelApiResponse response = api.uploadImage(petId, additionalMetadata, _file);
        // TODO: test validations
    }

}
