/**
 *
 * Please note:
 * This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.acme.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.acme.client.models.PaginateRequest
import com.acme.client.models.PaginateResponse

import com.squareup.moshi.Json

import com.acme.client.infrastructure.ApiClient
import com.acme.client.infrastructure.ApiResponse
import com.acme.client.infrastructure.ClientException
import com.acme.client.infrastructure.ClientError
import com.acme.client.infrastructure.ServerException
import com.acme.client.infrastructure.ServerError
import com.acme.client.infrastructure.MultiValueMap
import com.acme.client.infrastructure.PartConfig
import com.acme.client.infrastructure.RequestConfig
import com.acme.client.infrastructure.RequestMethod
import com.acme.client.infrastructure.ResponseType
import com.acme.client.infrastructure.Success
import com.acme.client.infrastructure.toMultiValue

class MiscellaneousApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://petstore.swagger.io/v2")
        }
    }

    /**
     * Pagination sandbox
     * Iterate through a bunch of items
     * @param paginateRequest  (optional)
     * @return PaginateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paginate(paginateRequest: PaginateRequest? = null) : PaginateResponse {
        val localVarResponse = paginateWithHttpInfo(paginateRequest = paginateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pagination sandbox
     * Iterate through a bunch of items
     * @param paginateRequest  (optional)
     * @return ApiResponse<PaginateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paginateWithHttpInfo(paginateRequest: PaginateRequest?) : ApiResponse<PaginateResponse?> {
        val localVariableConfig = paginateRequestConfig(paginateRequest = paginateRequest)

        return request<PaginateRequest, PaginateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paginate
     *
     * @param paginateRequest  (optional)
     * @return RequestConfig
     */
    fun paginateRequestConfig(paginateRequest: PaginateRequest?) : RequestConfig<PaginateRequest> {
        val localVariableBody = paginateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pagination",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
