/*
OpenAPI Petstore

Testing UserApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package acme

import (
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    acme "github.com/konfig-dev/acme-sdks/go"
)

func Test_acme_UserApiService(t *testing.T) {

    configuration := acme.NewConfiguration()
    apiClient := acme.NewAPIClient(configuration)

    t.Run("Test UserApiService CreateUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.CreateUser().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService CreateUsersWithArrayInput", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.CreateUsersWithArrayInput().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService CreateUsersWithListInput", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.CreateUsersWithListInput().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService DeleteUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var username string

        resp, httpRes, err := apiClient.UserApi.DeleteUser(username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService GetUserByName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var username string

        resp, httpRes, err := apiClient.UserApi.GetUserByName(username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService LoginUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.LoginUser().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService LogoutUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.LogoutUser().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService UpdateUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var username string

        resp, httpRes, err := apiClient.UserApi.UpdateUser(username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
