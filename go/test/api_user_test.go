/*
OpenAPI Petstore

Testing UserApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package acme

import (
    "os"
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    acme "github.com/konfig-dev/acme-sdks/go"
)

func Test_acme_UserApiService(t *testing.T) {

    configuration := acme.NewConfiguration()
    apiKey := os.Getenv("API_KEY")
    configuration.Context = context.WithValue(configuration.Context, acme.ContextAPIKeys, map[string]acme.APIKey{
        "api_key": {Key: apiKey},
    })
    apiClient := acme.NewAPIClient(configuration)

    t.Run("Test UserApiService Create", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.Create().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService CreateWithArray", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.CreateWithArray().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService CreateWithList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.CreateWithList().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService Delete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var username string

        resp, httpRes, err := apiClient.UserApi.Delete(username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService GetByName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var username string

        resp, httpRes, err := apiClient.UserApi.GetByName(username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService Login", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.Login().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService Logout", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UserApi.Logout().Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UserApiService Update", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var username string

        resp, httpRes, err := apiClient.UserApi.Update(username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
