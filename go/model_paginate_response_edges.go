/*
OpenAPI Petstore

This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package acme

import (
	"encoding/json"
)

// PaginateResponseEdges struct for PaginateResponseEdges
type PaginateResponseEdges struct {
	Node *PaginateResponseEdgesNode `json:"node,omitempty"`
}

// NewPaginateResponseEdges instantiates a new PaginateResponseEdges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginateResponseEdges() *PaginateResponseEdges {
	this := PaginateResponseEdges{}
	return &this
}

// NewPaginateResponseEdgesWithDefaults instantiates a new PaginateResponseEdges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginateResponseEdgesWithDefaults() *PaginateResponseEdges {
	this := PaginateResponseEdges{}
	return &this
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *PaginateResponseEdges) GetNode() PaginateResponseEdgesNode {
	if o == nil || isNil(o.Node) {
		var ret PaginateResponseEdgesNode
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginateResponseEdges) GetNodeOk() (*PaginateResponseEdgesNode, bool) {
	if o == nil || isNil(o.Node) {
    return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *PaginateResponseEdges) HasNode() bool {
	if o != nil && !isNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given PaginateResponseEdgesNode and assigns it to the Node field.
func (o *PaginateResponseEdges) SetNode(v PaginateResponseEdgesNode) {
	o.Node = &v
}

func (o PaginateResponseEdges) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	return json.Marshal(toSerialize)
}

type NullablePaginateResponseEdges struct {
	value *PaginateResponseEdges
	isSet bool
}

func (v NullablePaginateResponseEdges) Get() *PaginateResponseEdges {
	return v.value
}

func (v *NullablePaginateResponseEdges) Set(val *PaginateResponseEdges) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginateResponseEdges) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginateResponseEdges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginateResponseEdges(val *PaginateResponseEdges) *NullablePaginateResponseEdges {
	return &NullablePaginateResponseEdges{value: val, isSet: true}
}

func (v NullablePaginateResponseEdges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginateResponseEdges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


