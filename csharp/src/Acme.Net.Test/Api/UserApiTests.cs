/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Acme.Net.Client;
using Acme.Net.Api;
// uncomment below to import models
//using Acme.Net.Model;

namespace Acme.Net.Test.Api
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserApi
            //Assert.IsType<UserApi>(instance);
        }

        /// <summary>
        /// Test Create
        /// </summary>
        [Fact]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //instance.Create(user);
        }

        /// <summary>
        /// Test CreateWithArray
        /// </summary>
        [Fact]
        public void CreateWithArrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<User> user = null;
            //instance.CreateWithArray(user);
        }

        /// <summary>
        /// Test CreateWithList
        /// </summary>
        [Fact]
        public void CreateWithListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<User> user = null;
            //instance.CreateWithList(user);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Fact]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //instance.Delete(username);
        }

        /// <summary>
        /// Test GetByName
        /// </summary>
        [Fact]
        public void GetByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.GetByName(username);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test Login
        /// </summary>
        [Fact]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string password = null;
            //var response = instance.Login(username, password);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test Logout
        /// </summary>
        [Fact]
        public void LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Logout();
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Fact]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //User user = null;
            //instance.Update(username, user);
        }
    }
}
